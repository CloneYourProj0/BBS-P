<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离 
注意：使用mapper代理方法开发，namespace有特殊重要的作用
-->
<mapper namespace="com.gem.bbs.mapper.AnswerMapper">

    <!-- 根据问题id查询回复 -->
    <select id="selectListByAnswerId" parameterType="java.lang.Integer" resultType="map" >
        SELECT
            answer.*,
            COALESCE(user.loginname, botanduser.name) AS loginname
        FROM
            bbs.answer
                LEFT JOIN
            bbs.user ON answer.user_id = user.id
                JOIN
            bbs.botanduser ON answer.user_id = botanduser.bot_id
        WHERE
            answer.question_id =#{id}
    </select>

    <!-- 保存 -->
    <insert id="insertAnswer" parameterType="Answer" useGeneratedKeys="true" keyProperty="id">
        insert into answer (content,question_id,user_id,createtime,toanswerid) values(#{content},#{questionId},#{userId},#{createtime},#{toanswerid})
    </insert>

    <!--  此为ai自动生成，没有考虑到前面也就是第一个方法其实就已经实现了，可以复用；-->
<!--    &lt;!&ndash; 根据用户ID获取答案 &ndash;&gt;-->
<!--    <select id="getAnswersByUserId" parameterType="int" resultType="answer">-->
<!--        SELECT * FROM bbs.answer WHERE user_id = #{userId}-->
<!--    </select>-->

    <!-- 根据答案ID获取答案 -->
    <select id="getAnswerById" parameterType="int" resultType="answer">
        SELECT * FROM bbs.answer WHERE id = #{id}
    </select>

    <!-- 获取点赞数量 -->
    <select id="getLikedAnswerIds" resultType="java.lang.Integer">
        select answer_id from user_like where user_id=#{userid}
    </select>

    <delete id="deleLikeAnswerIds">
        delete from user_like where answer_id=#{answerId}
    </delete>

    <!-- 更新答案 -->
    <update id="updateAnswer" parameterType="answer">
        UPDATE bbs.answer
        <set>
            <if test="content != null">content = #{content},</if>
            <if test="is_accept != null">is_accept = #{is_accept},</if>
            <if test="likes != null">likes = #{likes},</if>
        </set>
        WHERE id = #{id}
    </update>

    <!-- 删除答案 -->
    <delete id="deleteAnswer" parameterType="int">
        DELETE FROM bbs.answer WHERE id = #{id}
    </delete>



    <!-- ************************************************************* -->

    <select id="queryAnswers" resultType="com.gem.bbs.entity.Answer">
        SELECT id, content, question_id, user_id, is_accept, likes, createtime, toanswerid
        FROM answer
        <where>
            <if test="query.userId != null">
                AND user_id = #{query.userId}
            </if>
            <if test="query.questionId != null">
                AND question_id = #{query.questionId}
            </if>
            <if test="query.startTime != null">
                AND createtime &gt;= #{query.startTime}
            </if>
            <if test="query.endTime != null">
                AND createtime &lt;= #{query.endTime}
            </if>
        </where>
        ORDER BY createtime DESC
        <if test="query.limit != null">
            LIMIT #{query.limit} OFFSET #{query.offset}
        </if>
    </select>
    <select id="countAnswers" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM answer
        <where>
            <if test="query.userId != null">
                AND user_id = #{query.userId}
            </if>
            <if test="query.questionId != null">
                AND question_id = #{query.questionId}
            </if>
            <if test="query.startTime != null">
                AND createtime &gt;= #{query.startTime}
            </if>
            <if test="query.endTime != null">
                AND createtime &lt;= #{query.endTime}
            </if>
        </where>
    </select>



</mapper>


